
BattleShip.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000416  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000416  0000048a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000048a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000e8  00000000  00000000  000004ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000012af  00000000  00000000  000005a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000778  00000000  00000000  00001851  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000410  00000000  00000000  00001fc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001e0  00000000  00000000  000023dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000003dc  00000000  00000000  000025bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000735  00000000  00000000  00002998  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000b0  00000000  00000000  000030cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 09 02 	jmp	0x412	; 0x412 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "wegotthefunk.h"
#include "shipset.h"
#define F_CPU 16000000UL
#include <util/delay.h>

int main( void ) {
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	00 d0       	rcall	.+0      	; 0x72 <main+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <main+0x8>
  74:	00 d0       	rcall	.+0      	; 0x76 <main+0xa>
  76:	cd b7       	in	r28, 0x3d	; 61
  78:	de b7       	in	r29, 0x3e	; 62
	game BattleShip( 1 );	
  7a:	61 e0       	ldi	r22, 0x01	; 1
  7c:	ce 01       	movw	r24, r28
  7e:	05 96       	adiw	r24, 0x05	; 5
  80:	0e 94 4f 00 	call	0x9e	; 0x9e <_ZN4gameC1Eh>
	screen defense_board;
  84:	ce 01       	movw	r24, r28
  86:	01 96       	adiw	r24, 0x01	; 1
  88:	0e 94 57 00 	call	0xae	; 0xae <_ZN6screenC1Ev>
	
	while( 1 ) {
		setDingy( defense_board );
  8c:	ce 01       	movw	r24, r28
  8e:	01 96       	adiw	r24, 0x01	; 1
  90:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8setDingyR6screen>
		setDualDingy( defense_board );
  94:	ce 01       	movw	r24, r28
  96:	01 96       	adiw	r24, 0x01	; 1
  98:	0e 94 1a 01 	call	0x234	; 0x234 <_Z12setDualDingyR6screen>
  9c:	f7 cf       	rjmp	.-18     	; 0x8c <main+0x20>

0000009e <_ZN4gameC1Eh>:
	MCU = 1;			//by default sets the player to one
	turn = 0;
}

game::game( unsigned char MCU_number ) {
	DDRC = 0xFF;
  9e:	2f ef       	ldi	r18, 0xFF	; 255
  a0:	24 bb       	out	0x14, r18	; 20
	DDRD = 0x07;
  a2:	27 e0       	ldi	r18, 0x07	; 7
  a4:	21 bb       	out	0x11, r18	; 17
	MCU = MCU_number;
  a6:	fc 01       	movw	r30, r24
  a8:	61 83       	std	Z+1, r22	; 0x01
	turn = 0;
  aa:	10 82       	st	Z, r1
  ac:	08 95       	ret

000000ae <_ZN6screenC1Ev>:
#include <avr/io.h>
#include "screen.h"
#include "wegotthefunk.h"

screen::screen( void ) {
  ae:	fc 01       	movw	r30, r24
	grid[0] = 0xE0;
  b0:	80 ee       	ldi	r24, 0xE0	; 224
  b2:	80 83       	st	Z, r24
	grid[1] = 0xD0;
  b4:	80 ed       	ldi	r24, 0xD0	; 208
  b6:	81 83       	std	Z+1, r24	; 0x01
	grid[2] = 0xB0;
  b8:	80 eb       	ldi	r24, 0xB0	; 176
  ba:	82 83       	std	Z+2, r24	; 0x02
	grid[3] = 0x70;
  bc:	80 e7       	ldi	r24, 0x70	; 112
  be:	83 83       	std	Z+3, r24	; 0x03
  c0:	08 95       	ret

000000c2 <_ZN6screen8addLightEhh>:
}


void screen::addLight( unsigned char row, unsigned char col ) {
	grid[row] |= ( 1 << col );
  c2:	fc 01       	movw	r30, r24
  c4:	e6 0f       	add	r30, r22
  c6:	f1 1d       	adc	r31, r1
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	9c 01       	movw	r18, r24
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <_ZN6screen8addLightEhh+0x12>
  d0:	22 0f       	add	r18, r18
  d2:	33 1f       	adc	r19, r19
  d4:	4a 95       	dec	r20
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <_ZN6screen8addLightEhh+0xe>
  d8:	a9 01       	movw	r20, r18
  da:	80 81       	ld	r24, Z
  dc:	48 2b       	or	r20, r24
  de:	40 83       	st	Z, r20
  e0:	08 95       	ret

000000e2 <_ZN6screen8subLightEhh>:
}

void screen::subLight( unsigned char row, unsigned char col ) {
	grid[row] &= ~( 1 << col );
  e2:	fc 01       	movw	r30, r24
  e4:	e6 0f       	add	r30, r22
  e6:	f1 1d       	adc	r31, r1
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	9c 01       	movw	r18, r24
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <_ZN6screen8subLightEhh+0x12>
  f0:	22 0f       	add	r18, r18
  f2:	33 1f       	adc	r19, r19
  f4:	4a 95       	dec	r20
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <_ZN6screen8subLightEhh+0xe>
  f8:	a9 01       	movw	r20, r18
  fa:	40 95       	com	r20
  fc:	80 81       	ld	r24, Z
  fe:	48 23       	and	r20, r24
 100:	40 83       	st	Z, r20
 102:	08 95       	ret

00000104 <_ZN6screen7flickerEv>:
}

void screen::flicker( void ) {
 104:	fc 01       	movw	r30, r24
	unsigned char i;
	for ( i = 0; i < 4; i++ ) {
		PORTC = grid[i];
 106:	80 81       	ld	r24, Z
 108:	85 bb       	out	0x15, r24	; 21
 10a:	81 81       	ldd	r24, Z+1	; 0x01
 10c:	85 bb       	out	0x15, r24	; 21
 10e:	82 81       	ldd	r24, Z+2	; 0x02
 110:	85 bb       	out	0x15, r24	; 21
 112:	83 81       	ldd	r24, Z+3	; 0x03
 114:	85 bb       	out	0x15, r24	; 21
	}
	clearScreen();
 116:	0e 94 06 02 	call	0x40c	; 0x40c <_Z11clearScreenv>
 11a:	08 95       	ret

0000011c <_ZN6screen14collisionCheckEh>:
}

bool screen::collisionCheck( unsigned char unique_ship_tiles ) {
 11c:	ff 92       	push	r15
 11e:	0f 93       	push	r16
 120:	1f 93       	push	r17
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
	unsigned char count = unique_ship_tiles;
	for ( int i = 0; i < 4; i++ ){
 126:	00 e0       	ldi	r16, 0x00	; 0
 128:	10 e0       	ldi	r17, 0x00	; 0
		for ( int j = 0; j < 4; j++ ) {
			if ( ( grid[i] & ( 1 << j ) ) == ( 1 << j ) ) {
 12a:	f1 2c       	mov	r15, r1
 12c:	70 e0       	ldi	r23, 0x00	; 0
 12e:	c1 e0       	ldi	r28, 0x01	; 1
 130:	d0 e0       	ldi	r29, 0x00	; 0
 132:	18 c0       	rjmp	.+48     	; 0x164 <_ZN6screen14collisionCheckEh+0x48>
 134:	ae 01       	movw	r20, r28
 136:	02 2e       	mov	r0, r18
 138:	02 c0       	rjmp	.+4      	; 0x13e <_ZN6screen14collisionCheckEh+0x22>
 13a:	44 0f       	add	r20, r20
 13c:	55 1f       	adc	r21, r21
 13e:	0a 94       	dec	r0
 140:	e2 f7       	brpl	.-8      	; 0x13a <_ZN6screen14collisionCheckEh+0x1e>
 142:	fa 01       	movw	r30, r20
 144:	ea 23       	and	r30, r26
 146:	fb 23       	and	r31, r27
 148:	4e 17       	cp	r20, r30
 14a:	5f 07       	cpc	r21, r31
 14c:	09 f4       	brne	.+2      	; 0x150 <_ZN6screen14collisionCheckEh+0x34>
				count--;
 14e:	61 50       	subi	r22, 0x01	; 1
}

bool screen::collisionCheck( unsigned char unique_ship_tiles ) {
	unsigned char count = unique_ship_tiles;
	for ( int i = 0; i < 4; i++ ){
		for ( int j = 0; j < 4; j++ ) {
 150:	2f 5f       	subi	r18, 0xFF	; 255
 152:	3f 4f       	sbci	r19, 0xFF	; 255
 154:	24 30       	cpi	r18, 0x04	; 4
 156:	31 05       	cpc	r19, r1
 158:	69 f7       	brne	.-38     	; 0x134 <_ZN6screen14collisionCheckEh+0x18>
	clearScreen();
}

bool screen::collisionCheck( unsigned char unique_ship_tiles ) {
	unsigned char count = unique_ship_tiles;
	for ( int i = 0; i < 4; i++ ){
 15a:	0f 5f       	subi	r16, 0xFF	; 255
 15c:	1f 4f       	sbci	r17, 0xFF	; 255
 15e:	04 30       	cpi	r16, 0x04	; 4
 160:	11 05       	cpc	r17, r1
 162:	39 f0       	breq	.+14     	; 0x172 <_ZN6screen14collisionCheckEh+0x56>
		for ( int j = 0; j < 4; j++ ) {
			if ( ( grid[i] & ( 1 << j ) ) == ( 1 << j ) ) {
 164:	fc 01       	movw	r30, r24
 166:	a1 91       	ld	r26, Z+
 168:	cf 01       	movw	r24, r30
 16a:	b0 e0       	ldi	r27, 0x00	; 0
 16c:	2f 2d       	mov	r18, r15
 16e:	37 2f       	mov	r19, r23
 170:	e1 cf       	rjmp	.-62     	; 0x134 <_ZN6screen14collisionCheckEh+0x18>
				count--;
			}
		}
	}
	if ( count == 0 ) {
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	61 11       	cpse	r22, r1
 176:	01 c0       	rjmp	.+2      	; 0x17a <_ZN6screen14collisionCheckEh+0x5e>
 178:	80 e0       	ldi	r24, 0x00	; 0
		return ( false );
	}
	else {
		return ( true );
	}
}	
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	1f 91       	pop	r17
 180:	0f 91       	pop	r16
 182:	ff 90       	pop	r15
 184:	08 95       	ret

00000186 <_ZN6screen9clearGridEv>:

void screen::clearGrid( void ) {
 186:	fc 01       	movw	r30, r24
	grid[0] = 0xE0;
 188:	80 ee       	ldi	r24, 0xE0	; 224
 18a:	80 83       	st	Z, r24
	grid[1] = 0xD0;
 18c:	80 ed       	ldi	r24, 0xD0	; 208
 18e:	81 83       	std	Z+1, r24	; 0x01
	grid[2] = 0xB0;
 190:	80 eb       	ldi	r24, 0xB0	; 176
 192:	82 83       	std	Z+2, r24	; 0x02
	grid[3] = 0x70;
 194:	80 e7       	ldi	r24, 0x70	; 112
 196:	83 83       	std	Z+3, r24	; 0x03
 198:	08 95       	ret

0000019a <_Z8setDingyR6screen>:
#include <avr/io.h>
#include "screen.h"
#include "wegotthefunk.h"
#include "shipset.h"

void setDingy( screen &current_screen ) {
 19a:	0f 93       	push	r16
 19c:	1f 93       	push	r17
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
 1a2:	ec 01       	movw	r28, r24
	char input_direction;				//var used to move ship on board
	char row, col;					//coordinate variables
	row = 0;
	col = 0;
	current_screen.addLight( row, col );	//lights up coordinate ( 1, A ) 
 1a4:	40 e0       	ldi	r20, 0x00	; 0
 1a6:	60 e0       	ldi	r22, 0x00	; 0
 1a8:	0e 94 61 00 	call	0xc2	; 0xc2 <_ZN6screen8addLightEhh>

void setDingy( screen &current_screen ) {
	char input_direction;				//var used to move ship on board
	char row, col;					//coordinate variables
	row = 0;
	col = 0;
 1ac:	00 e0       	ldi	r16, 0x00	; 0
#include "shipset.h"

void setDingy( screen &current_screen ) {
	char input_direction;				//var used to move ship on board
	char row, col;					//coordinate variables
	row = 0;
 1ae:	10 e0       	ldi	r17, 0x00	; 0
	col = 0;
	current_screen.addLight( row, col );	//lights up coordinate ( 1, A ) 
	char x = 1;
	while (  1 ) {
		input_direction = getInput( current_screen );
 1b0:	68 81       	ld	r22, Y
 1b2:	79 81       	ldd	r23, Y+1	; 0x01
 1b4:	8a 81       	ldd	r24, Y+2	; 0x02
 1b6:	9b 81       	ldd	r25, Y+3	; 0x03
 1b8:	0e 94 b7 01 	call	0x36e	; 0x36e <_Z8getInput6screen>
		if ( input_direction == 0 && row != 0 ) {
 1bc:	81 11       	cpse	r24, r1
 1be:	09 c0       	rjmp	.+18     	; 0x1d2 <_Z8setDingyR6screen+0x38>
 1c0:	11 23       	and	r17, r17
 1c2:	e9 f0       	breq	.+58     	; 0x1fe <_Z8setDingyR6screen+0x64>
			current_screen.subLight( row, col );
 1c4:	40 2f       	mov	r20, r16
 1c6:	61 2f       	mov	r22, r17
 1c8:	ce 01       	movw	r24, r28
 1ca:	0e 94 71 00 	call	0xe2	; 0xe2 <_ZN6screen8subLightEhh>
			row--;
 1ce:	11 50       	subi	r17, 0x01	; 1
 1d0:	23 c0       	rjmp	.+70     	; 0x218 <_Z8setDingyR6screen+0x7e>
		}
		else if ( input_direction == 1 && row != 3 ) {
 1d2:	81 30       	cpi	r24, 0x01	; 1
 1d4:	49 f4       	brne	.+18     	; 0x1e8 <_Z8setDingyR6screen+0x4e>
 1d6:	13 30       	cpi	r17, 0x03	; 3
 1d8:	e9 f0       	breq	.+58     	; 0x214 <_Z8setDingyR6screen+0x7a>
			current_screen.subLight( row, col );
 1da:	40 2f       	mov	r20, r16
 1dc:	61 2f       	mov	r22, r17
 1de:	ce 01       	movw	r24, r28
 1e0:	0e 94 71 00 	call	0xe2	; 0xe2 <_ZN6screen8subLightEhh>
			row++;
 1e4:	1f 5f       	subi	r17, 0xFF	; 255
 1e6:	18 c0       	rjmp	.+48     	; 0x218 <_Z8setDingyR6screen+0x7e>
		}
		else if ( input_direction == 2 && col != 0 ) {
 1e8:	82 30       	cpi	r24, 0x02	; 2
 1ea:	49 f4       	brne	.+18     	; 0x1fe <_Z8setDingyR6screen+0x64>
 1ec:	00 23       	and	r16, r16
 1ee:	a1 f0       	breq	.+40     	; 0x218 <_Z8setDingyR6screen+0x7e>
			current_screen.subLight( row, col );
 1f0:	40 2f       	mov	r20, r16
 1f2:	61 2f       	mov	r22, r17
 1f4:	ce 01       	movw	r24, r28
 1f6:	0e 94 71 00 	call	0xe2	; 0xe2 <_ZN6screen8subLightEhh>
			col--;
 1fa:	01 50       	subi	r16, 0x01	; 1
 1fc:	0d c0       	rjmp	.+26     	; 0x218 <_Z8setDingyR6screen+0x7e>
		}
		else if ( input_direction == 3 && col != 3 ) {
 1fe:	83 30       	cpi	r24, 0x03	; 3
 200:	49 f4       	brne	.+18     	; 0x214 <_Z8setDingyR6screen+0x7a>
 202:	03 30       	cpi	r16, 0x03	; 3
 204:	49 f0       	breq	.+18     	; 0x218 <_Z8setDingyR6screen+0x7e>
			current_screen.subLight( row, col );
 206:	40 2f       	mov	r20, r16
 208:	61 2f       	mov	r22, r17
 20a:	ce 01       	movw	r24, r28
 20c:	0e 94 71 00 	call	0xe2	; 0xe2 <_ZN6screen8subLightEhh>
			col++;
 210:	0f 5f       	subi	r16, 0xFF	; 255
 212:	02 c0       	rjmp	.+4      	; 0x218 <_Z8setDingyR6screen+0x7e>
		}
		if ( input_direction == 4 ) {
 214:	84 30       	cpi	r24, 0x04	; 4
 216:	49 f0       	breq	.+18     	; 0x22a <_Z8setDingyR6screen+0x90>
			break;
		}
		current_screen.addLight( row, col );
 218:	40 2f       	mov	r20, r16
 21a:	61 2f       	mov	r22, r17
 21c:	ce 01       	movw	r24, r28
 21e:	0e 94 61 00 	call	0xc2	; 0xc2 <_ZN6screen8addLightEhh>
		current_screen.flicker();
 222:	ce 01       	movw	r24, r28
 224:	0e 94 82 00 	call	0x104	; 0x104 <_ZN6screen7flickerEv>
	}
 228:	c3 cf       	rjmp	.-122    	; 0x1b0 <_Z8setDingyR6screen+0x16>
}
 22a:	df 91       	pop	r29
 22c:	cf 91       	pop	r28
 22e:	1f 91       	pop	r17
 230:	0f 91       	pop	r16
 232:	08 95       	ret

00000234 <_Z12setDualDingyR6screen>:

void setDualDingy( screen &current_screen ) {
 234:	ff 92       	push	r15
 236:	0f 93       	push	r16
 238:	1f 93       	push	r17
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
 23e:	ec 01       	movw	r28, r24
	unsigned char input_direction;					//var used to move ship on board
	unsigned char row, col;						//coordinate variables
	row = 0;
	col = 0;
	current_screen.addLight( row, col );		//lights up coordinate ( 0, 0 )
 240:	40 e0       	ldi	r20, 0x00	; 0
 242:	60 e0       	ldi	r22, 0x00	; 0
 244:	0e 94 61 00 	call	0xc2	; 0xc2 <_ZN6screen8addLightEhh>
	current_screen.addLight( row + 1, col );	//lights up coordinate ( 1, 0 )
 248:	40 e0       	ldi	r20, 0x00	; 0
 24a:	61 e0       	ldi	r22, 0x01	; 1
 24c:	ce 01       	movw	r24, r28
 24e:	0e 94 61 00 	call	0xc2	; 0xc2 <_ZN6screen8addLightEhh>

void setDualDingy( screen &current_screen ) {
	unsigned char input_direction;					//var used to move ship on board
	unsigned char row, col;						//coordinate variables
	row = 0;
	col = 0;
 252:	00 e0       	ldi	r16, 0x00	; 0
}

void setDualDingy( screen &current_screen ) {
	unsigned char input_direction;					//var used to move ship on board
	unsigned char row, col;						//coordinate variables
	row = 0;
 254:	10 e0       	ldi	r17, 0x00	; 0
	current_screen.addLight( row, col );		//lights up coordinate ( 0, 0 )
	current_screen.addLight( row + 1, col );	//lights up coordinate ( 1, 0 )
	
	
	while ( 1 ) {
		input_direction = getInput( current_screen );
 256:	68 81       	ld	r22, Y
 258:	79 81       	ldd	r23, Y+1	; 0x01
 25a:	8a 81       	ldd	r24, Y+2	; 0x02
 25c:	9b 81       	ldd	r25, Y+3	; 0x03
 25e:	0e 94 b7 01 	call	0x36e	; 0x36e <_Z8getInput6screen>
		if ( input_direction == 0 && row != 0 ) {
 262:	81 11       	cpse	r24, r1
 264:	10 c0       	rjmp	.+32     	; 0x286 <_Z12setDualDingyR6screen+0x52>
 266:	11 23       	and	r17, r17
 268:	09 f4       	brne	.+2      	; 0x26c <_Z12setDualDingyR6screen+0x38>
 26a:	40 c0       	rjmp	.+128    	; 0x2ec <_Z12setDualDingyR6screen+0xb8>
			current_screen.subLight( row + 1, col );
 26c:	61 e0       	ldi	r22, 0x01	; 1
 26e:	61 0f       	add	r22, r17
 270:	40 2f       	mov	r20, r16
 272:	ce 01       	movw	r24, r28
 274:	0e 94 71 00 	call	0xe2	; 0xe2 <_ZN6screen8subLightEhh>
			row--;
 278:	11 50       	subi	r17, 0x01	; 1
			current_screen.addLight( row, col );
 27a:	40 2f       	mov	r20, r16
 27c:	61 2f       	mov	r22, r17
 27e:	ce 01       	movw	r24, r28
 280:	0e 94 61 00 	call	0xc2	; 0xc2 <_ZN6screen8addLightEhh>
 284:	6a c0       	rjmp	.+212    	; 0x35a <_Z12setDualDingyR6screen+0x126>
		}
		else if ( input_direction == 1 && row != 2 ) {
 286:	81 30       	cpi	r24, 0x01	; 1
 288:	99 f4       	brne	.+38     	; 0x2b0 <_Z12setDualDingyR6screen+0x7c>
 28a:	12 30       	cpi	r17, 0x02	; 2
 28c:	09 f4       	brne	.+2      	; 0x290 <_Z12setDualDingyR6screen+0x5c>
 28e:	4b c0       	rjmp	.+150    	; 0x326 <_Z12setDualDingyR6screen+0xf2>
			current_screen.subLight( row, col );
 290:	40 2f       	mov	r20, r16
 292:	61 2f       	mov	r22, r17
 294:	ce 01       	movw	r24, r28
 296:	0e 94 71 00 	call	0xe2	; 0xe2 <_ZN6screen8subLightEhh>
			row++;
 29a:	ff 24       	eor	r15, r15
 29c:	f3 94       	inc	r15
 29e:	f1 0e       	add	r15, r17
			current_screen.addLight( row + 1, col );
 2a0:	62 e0       	ldi	r22, 0x02	; 2
 2a2:	61 0f       	add	r22, r17
 2a4:	40 2f       	mov	r20, r16
 2a6:	ce 01       	movw	r24, r28
 2a8:	0e 94 61 00 	call	0xc2	; 0xc2 <_ZN6screen8addLightEhh>
			row--;
			current_screen.addLight( row, col );
		}
		else if ( input_direction == 1 && row != 2 ) {
			current_screen.subLight( row, col );
			row++;
 2ac:	1f 2d       	mov	r17, r15
			current_screen.addLight( row + 1, col );
 2ae:	55 c0       	rjmp	.+170    	; 0x35a <_Z12setDualDingyR6screen+0x126>
		}
		else if ( input_direction == 2 && col != 0 ) {
 2b0:	82 30       	cpi	r24, 0x02	; 2
 2b2:	e1 f4       	brne	.+56     	; 0x2ec <_Z12setDualDingyR6screen+0xb8>
 2b4:	00 23       	and	r16, r16
 2b6:	09 f4       	brne	.+2      	; 0x2ba <_Z12setDualDingyR6screen+0x86>
 2b8:	50 c0       	rjmp	.+160    	; 0x35a <_Z12setDualDingyR6screen+0x126>
			current_screen.subLight( row, col );
 2ba:	40 2f       	mov	r20, r16
 2bc:	61 2f       	mov	r22, r17
 2be:	ce 01       	movw	r24, r28
 2c0:	0e 94 71 00 	call	0xe2	; 0xe2 <_ZN6screen8subLightEhh>
			current_screen.subLight( row + 1, col );
 2c4:	40 2f       	mov	r20, r16
 2c6:	ff 24       	eor	r15, r15
 2c8:	f3 94       	inc	r15
 2ca:	f1 0e       	add	r15, r17
 2cc:	6f 2d       	mov	r22, r15
 2ce:	ce 01       	movw	r24, r28
 2d0:	0e 94 71 00 	call	0xe2	; 0xe2 <_ZN6screen8subLightEhh>
			col--;
 2d4:	01 50       	subi	r16, 0x01	; 1
			current_screen.addLight( row, col );
 2d6:	40 2f       	mov	r20, r16
 2d8:	61 2f       	mov	r22, r17
 2da:	ce 01       	movw	r24, r28
 2dc:	0e 94 61 00 	call	0xc2	; 0xc2 <_ZN6screen8addLightEhh>
			current_screen.addLight( row + 1, col );
 2e0:	40 2f       	mov	r20, r16
 2e2:	6f 2d       	mov	r22, r15
 2e4:	ce 01       	movw	r24, r28
 2e6:	0e 94 61 00 	call	0xc2	; 0xc2 <_ZN6screen8addLightEhh>
 2ea:	37 c0       	rjmp	.+110    	; 0x35a <_Z12setDualDingyR6screen+0x126>
		}
		else if ( input_direction == 3 && col != 3 ) {
 2ec:	83 30       	cpi	r24, 0x03	; 3
 2ee:	d9 f4       	brne	.+54     	; 0x326 <_Z12setDualDingyR6screen+0xf2>
 2f0:	03 30       	cpi	r16, 0x03	; 3
 2f2:	99 f1       	breq	.+102    	; 0x35a <_Z12setDualDingyR6screen+0x126>
			current_screen.subLight( row, col );
 2f4:	40 2f       	mov	r20, r16
 2f6:	61 2f       	mov	r22, r17
 2f8:	ce 01       	movw	r24, r28
 2fa:	0e 94 71 00 	call	0xe2	; 0xe2 <_ZN6screen8subLightEhh>
			current_screen.subLight( row + 1, col );
 2fe:	40 2f       	mov	r20, r16
 300:	ff 24       	eor	r15, r15
 302:	f3 94       	inc	r15
 304:	f1 0e       	add	r15, r17
 306:	6f 2d       	mov	r22, r15
 308:	ce 01       	movw	r24, r28
 30a:	0e 94 71 00 	call	0xe2	; 0xe2 <_ZN6screen8subLightEhh>
			col++;
 30e:	0f 5f       	subi	r16, 0xFF	; 255
			current_screen.addLight( row, col );
 310:	40 2f       	mov	r20, r16
 312:	61 2f       	mov	r22, r17
 314:	ce 01       	movw	r24, r28
 316:	0e 94 61 00 	call	0xc2	; 0xc2 <_ZN6screen8addLightEhh>
			current_screen.addLight( row + 1, col );
 31a:	40 2f       	mov	r20, r16
 31c:	6f 2d       	mov	r22, r15
 31e:	ce 01       	movw	r24, r28
 320:	0e 94 61 00 	call	0xc2	; 0xc2 <_ZN6screen8addLightEhh>
 324:	1a c0       	rjmp	.+52     	; 0x35a <_Z12setDualDingyR6screen+0x126>
		}
		else if ( input_direction == 4 ) {
 326:	84 30       	cpi	r24, 0x04	; 4
 328:	c1 f4       	brne	.+48     	; 0x35a <_Z12setDualDingyR6screen+0x126>
			if ( current_screen.collisionCheck( 3 ) == false ) {
 32a:	63 e0       	ldi	r22, 0x03	; 3
 32c:	ce 01       	movw	r24, r28
 32e:	0e 94 8e 00 	call	0x11c	; 0x11c <_ZN6screen14collisionCheckEh>
 332:	88 23       	and	r24, r24
 334:	b1 f0       	breq	.+44     	; 0x362 <_Z12setDualDingyR6screen+0x12e>
				break;
			}
			else {
				current_screen.clearGrid();
 336:	ce 01       	movw	r24, r28
 338:	0e 94 c3 00 	call	0x186	; 0x186 <_ZN6screen9clearGridEv>
				setDingy( current_screen );
 33c:	ce 01       	movw	r24, r28
 33e:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8setDingyR6screen>
				row = 0;
				col = 0;
				current_screen.addLight( row, col );		//lights up coordinate ( 0, 0 )
 342:	40 e0       	ldi	r20, 0x00	; 0
 344:	60 e0       	ldi	r22, 0x00	; 0
 346:	ce 01       	movw	r24, r28
 348:	0e 94 61 00 	call	0xc2	; 0xc2 <_ZN6screen8addLightEhh>
				current_screen.addLight( row + 1, col );	
 34c:	40 e0       	ldi	r20, 0x00	; 0
 34e:	61 e0       	ldi	r22, 0x01	; 1
 350:	ce 01       	movw	r24, r28
 352:	0e 94 61 00 	call	0xc2	; 0xc2 <_ZN6screen8addLightEhh>
			}
			else {
				current_screen.clearGrid();
				setDingy( current_screen );
				row = 0;
				col = 0;
 356:	00 e0       	ldi	r16, 0x00	; 0
				break;
			}
			else {
				current_screen.clearGrid();
				setDingy( current_screen );
				row = 0;
 358:	10 e0       	ldi	r17, 0x00	; 0
				col = 0;
				current_screen.addLight( row, col );		//lights up coordinate ( 0, 0 )
				current_screen.addLight( row + 1, col );	
			}
		}
		current_screen.flicker();
 35a:	ce 01       	movw	r24, r28
 35c:	0e 94 82 00 	call	0x104	; 0x104 <_ZN6screen7flickerEv>
	}
 360:	7a cf       	rjmp	.-268    	; 0x256 <_Z12setDualDingyR6screen+0x22>
}
 362:	df 91       	pop	r29
 364:	cf 91       	pop	r28
 366:	1f 91       	pop	r17
 368:	0f 91       	pop	r16
 36a:	ff 90       	pop	r15
 36c:	08 95       	ret

0000036e <_Z8getInput6screen>:
#define F_CPU 16000000UL
#include <util/delay.h>



char getInput( screen current_screen ) {
 36e:	ef 92       	push	r14
 370:	ff 92       	push	r15
 372:	0f 93       	push	r16
 374:	1f 93       	push	r17
 376:	cf 93       	push	r28
 378:	df 93       	push	r29
 37a:	00 d0       	rcall	.+0      	; 0x37c <_Z8getInput6screen+0xe>
 37c:	00 d0       	rcall	.+0      	; 0x37e <_Z8getInput6screen+0x10>
 37e:	cd b7       	in	r28, 0x3d	; 61
 380:	de b7       	in	r29, 0x3e	; 62
 382:	69 83       	std	Y+1, r22	; 0x01
 384:	7a 83       	std	Y+2, r23	; 0x02
 386:	8b 83       	std	Y+3, r24	; 0x03
 388:	9c 83       	std	Y+4, r25	; 0x04
	char i = ( 0 );
 38a:	f1 2c       	mov	r15, r1
	while ( true ) {
		if ( ( PIND & ( 1 << ( i + 4 ) ) ) == ( 1 << ( i + 4 ) ) ) {
 38c:	01 e0       	ldi	r16, 0x01	; 1
 38e:	10 e0       	ldi	r17, 0x00	; 0
		}
		else {
			current_screen.flicker();
			i++;
			if ( i == 4 ) {
				i = 0;
 390:	e1 2c       	mov	r14, r1
 392:	01 c0       	rjmp	.+2      	; 0x396 <_Z8getInput6screen+0x28>
 394:	fe 2c       	mov	r15, r14


char getInput( screen current_screen ) {
	char i = ( 0 );
	while ( true ) {
		if ( ( PIND & ( 1 << ( i + 4 ) ) ) == ( 1 << ( i + 4 ) ) ) {
 396:	40 b3       	in	r20, 0x10	; 16
 398:	24 e0       	ldi	r18, 0x04	; 4
 39a:	2f 0d       	add	r18, r15
 39c:	c8 01       	movw	r24, r16
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <_Z8getInput6screen+0x36>
 3a0:	88 0f       	add	r24, r24
 3a2:	99 1f       	adc	r25, r25
 3a4:	2a 95       	dec	r18
 3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <_Z8getInput6screen+0x32>
 3a8:	50 e0       	ldi	r21, 0x00	; 0
 3aa:	48 23       	and	r20, r24
 3ac:	59 23       	and	r21, r25
 3ae:	84 17       	cp	r24, r20
 3b0:	95 07       	cpc	r25, r21
 3b2:	59 f4       	brne	.+22     	; 0x3ca <_Z8getInput6screen+0x5c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3b4:	9f ef       	ldi	r25, 0xFF	; 255
 3b6:	29 e6       	ldi	r18, 0x69	; 105
 3b8:	88 e1       	ldi	r24, 0x18	; 24
 3ba:	91 50       	subi	r25, 0x01	; 1
 3bc:	20 40       	sbci	r18, 0x00	; 0
 3be:	80 40       	sbci	r24, 0x00	; 0
 3c0:	e1 f7       	brne	.-8      	; 0x3ba <_Z8getInput6screen+0x4c>
 3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <_Z8getInput6screen+0x56>
 3c4:	00 00       	nop
			_delay_ms( 500 );
			return ( i );
 3c6:	8f 2d       	mov	r24, r15
 3c8:	16 c0       	rjmp	.+44     	; 0x3f6 <_Z8getInput6screen+0x88>
		}
		if ( ( PIND & 0x08 ) == 0x08 ) {
 3ca:	83 9b       	sbis	0x10, 3	; 16
 3cc:	0b c0       	rjmp	.+22     	; 0x3e4 <_Z8getInput6screen+0x76>
 3ce:	9f ef       	ldi	r25, 0xFF	; 255
 3d0:	29 e6       	ldi	r18, 0x69	; 105
 3d2:	88 e1       	ldi	r24, 0x18	; 24
 3d4:	91 50       	subi	r25, 0x01	; 1
 3d6:	20 40       	sbci	r18, 0x00	; 0
 3d8:	80 40       	sbci	r24, 0x00	; 0
 3da:	e1 f7       	brne	.-8      	; 0x3d4 <_Z8getInput6screen+0x66>
 3dc:	00 c0       	rjmp	.+0      	; 0x3de <_Z8getInput6screen+0x70>
 3de:	00 00       	nop
			_delay_ms( 500 );
			return ( 4 );
 3e0:	84 e0       	ldi	r24, 0x04	; 4
 3e2:	09 c0       	rjmp	.+18     	; 0x3f6 <_Z8getInput6screen+0x88>
		}
		else {
			current_screen.flicker();
 3e4:	ce 01       	movw	r24, r28
 3e6:	01 96       	adiw	r24, 0x01	; 1
 3e8:	0e 94 82 00 	call	0x104	; 0x104 <_ZN6screen7flickerEv>
			i++;
 3ec:	f3 94       	inc	r15
			if ( i == 4 ) {
 3ee:	94 e0       	ldi	r25, 0x04	; 4
 3f0:	f9 12       	cpse	r15, r25
 3f2:	d1 cf       	rjmp	.-94     	; 0x396 <_Z8getInput6screen+0x28>
 3f4:	cf cf       	rjmp	.-98     	; 0x394 <_Z8getInput6screen+0x26>
				i = 0;
			}
		}
	}
}
 3f6:	0f 90       	pop	r0
 3f8:	0f 90       	pop	r0
 3fa:	0f 90       	pop	r0
 3fc:	0f 90       	pop	r0
 3fe:	df 91       	pop	r29
 400:	cf 91       	pop	r28
 402:	1f 91       	pop	r17
 404:	0f 91       	pop	r16
 406:	ff 90       	pop	r15
 408:	ef 90       	pop	r14
 40a:	08 95       	ret

0000040c <_Z11clearScreenv>:

void clearScreen( void ) {
	PORTC = 0xFF;
 40c:	8f ef       	ldi	r24, 0xFF	; 255
 40e:	85 bb       	out	0x15, r24	; 21
 410:	08 95       	ret

00000412 <_exit>:
 412:	f8 94       	cli

00000414 <__stop_program>:
 414:	ff cf       	rjmp	.-2      	; 0x414 <__stop_program>
